{
	"version": "https://jsonfeed.org/version/1",
	"title": "archonblue == Arlen Nagata, GICH",
	"icon": "https://micro.blog/archonblue/avatar.jpg",
	"home_page_url": "https://archonblue.com/",
	"feed_url": "https://archonblue.com/feed.json",
	"items": [
		
			{
				"id": "http://archonblue.micro.blog/2023/07/17/completed-the-soc.html",
				
				"content_html": "<p>Completed the SOC Level 1 Learning Path</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Completed the SOC Level 1 Learning Path\n\n<img src=\"uploads/2023/thm-whijass6mg.png\" width=\"600\" height=\"424\" alt=\"\">\n",
				"date_published": "2023-07-17T23:53:37-10:00",
				"url": "https://archonblue.com/2023/07/17/completed-the-soc.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/05/14/my-high-school.html",
				
				"content_html": "<p>My high school CTF team prevails!</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "My high school CTF team prevails! \n\n<img src=\"uploads/2023/c581435674.png\" width=\"600\" height=\"600\" alt=\"\">\n",
				"date_published": "2023-05-14T06:58:03-10:00",
				"url": "https://archonblue.com/2023/05/14/my-high-school.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/04/03/ever-wondered-what.html",
				
				"content_html": "<p>Ever wondered what your kali linux could do?  <a href=\"https://ethicalhackersacademy.com/blogs/ethical-hackers-academy/kali-linux-commands\">ethicalhackersacademy.com</a></p>\n",
				"content_text": "Ever wondered what your kali linux could do?  [ethicalhackersacademy.com](https://ethicalhackersacademy.com/blogs/ethical-hackers-academy/kali-linux-commands)\n",
				"date_published": "2023-04-03T20:32:59-10:00",
				"url": "https://archonblue.com/2023/04/03/ever-wondered-what.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/03/21/need-malware-here.html",
				
				"content_html": "<p>Need malware? Here are samples. <a href=\"https://www.malware-traffic-analysis.net/\">www.malware-traffic-analysis.net</a></p>\n",
				"content_text": "Need malware? Here are samples. [www.malware-traffic-analysis.net](https://www.malware-traffic-analysis.net/)\n",
				"date_published": "2023-03-21T20:37:40-10:00",
				"url": "https://archonblue.com/2023/03/21/need-malware-here.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/03/14/links-from-sans.html",
				
				"content_html": "<p>Links from SANS new2Cyber event. <a href=\"https://start.me/p/onlY8m/sans-new2cyber-2023\">start.me/p/onlY8m/&hellip;</a></p>\n",
				"content_text": "Links from SANS new2Cyber event. [start.me/p/onlY8m/...](https://start.me/p/onlY8m/sans-new2cyber-2023)\n",
				"date_published": "2023-03-14T20:10:22-10:00",
				"url": "https://archonblue.com/2023/03/14/links-from-sans.html",
				"tags": ["Cybersecurity"]
			},
			{
				"id": "http://archonblue.micro.blog/2023/03/06/api-security-resources.html",
				
				"content_html": "<p>API security resources  <a href=\"https://github.com/arainho/awesome-api-security\">github.com</a></p>\n",
				"content_text": "API security resources  [github.com](https://github.com/arainho/awesome-api-security)\n",
				"date_published": "2023-03-06T16:40:21-10:00",
				"url": "https://archonblue.com/2023/03/06/api-security-resources.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/02/25/tryhackme-is-super.html",
				
				"content_html": "<!-- raw HTML omitted -->\n",
				"content_text": "<img src=\"https://cdn.uploads.micro.blog/94954/2023/b7883589c9.png\" alt=\"THM HA0VZOZ1OI\" title=\"THM-HA0VZOZ1OI.png\" border=\"0\" width=\"599\" height=\"424\" />\nTryHackMe is super fun! \n",
				"date_published": "2023-02-25T21:03:37-10:00",
				"url": "https://archonblue.com/2023/02/25/tryhackme-is-super.html",
				"tags": ["Cybersecurity"]
			},
			{
				"id": "http://archonblue.micro.blog/2023/02/20/time-to-practice.html",
				
				"content_html": "<p>Time to practice using AWS. :) <a href=\"https://smashingmagazine.com/2023/02/host-wordpress-site-amazon-lightsail/\">smashingmagazine.com</a></p>\n",
				"content_text": "Time to practice using AWS. :) [smashingmagazine.com](https://smashingmagazine.com/2023/02/host-wordpress-site-amazon-lightsail/)\n",
				"date_published": "2023-02-20T13:40:16-10:00",
				"url": "https://archonblue.com/2023/02/20/time-to-practice.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/02/20/great-read-on.html",
				
				"content_html": "<p>Great read on storage and backup. Need to look into WORM backup solutions. :)  <a href=\"https://thehackernews.com/2023/02/a-cisos-practical-guide-to-storage-and.html\">thehackernews.com</a></p>\n",
				"content_text": "Great read on storage and backup. Need to look into WORM backup solutions. :)  [thehackernews.com](https://thehackernews.com/2023/02/a-cisos-practical-guide-to-storage-and.html)\n",
				"date_published": "2023-02-20T13:36:13-10:00",
				"url": "https://archonblue.com/2023/02/20/great-read-on.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/01/16/cyberpatriot-reflection-when.html",
				
				"content_html": "<p>CyberPatriot reflection…\nWhen i started 3 years ago we had 5 students. Now we have 4 teams and 3 of them are making the semi-finals this week! #proudCoach</p>\n",
				"content_text": "CyberPatriot reflection… \nWhen i started 3 years ago we had 5 students. Now we have 4 teams and 3 of them are making the semi-finals this week! #proudCoach\n",
				"date_published": "2023-01-16T19:33:13-10:00",
				"url": "https://archonblue.com/2023/01/16/cyberpatriot-reflection-when.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/01/08/thanks-to-sans.html",
				
				"content_html": "<p>Thanks to SANS, i am now certified!</p>\n<!-- raw HTML omitted -->\n",
				"content_text": "Thanks to SANS, i am now certified! \n\n<img src=\"https://cdn.uploads.micro.blog/94954/2023/691f6b484e.png\" width=\"298\" height=\"298\" alt=\"\">\n",
				"date_published": "2023-01-08T07:09:00-10:00",
				"url": "https://archonblue.com/2023/01/08/thanks-to-sans.html"
			},
			{
				"id": "http://archonblue.micro.blog/2023/01/01/zeek.html",
				"title": "Zeek",
				"content_html": "<h2 id=\"what-is-zeek\">What is Zeek    </h2>\n<p>Open Source Software By Vern Paxson to create &ldquo;Rich logs&rdquo; with information about network traffic.\nThis is a data-driven sensor to collect data, aggregate the data onto a log collector and gain insight into your network traffic.\nScalable to create many workers to collect data and processors. Can also be deployed on low cost off the shelf hardware.\nCluster configuration supports high bandwidth networks easily\nZeek likes to think of itself as an intelligence framework to analyze network traffic.</p>\n<h2 id=\"get-data-from-a-sensor\">Get data from a sensor</h2>\n<p>The focus of this article is not data collection, but analyst use to use data from packet captures that have been collected. \n`analyze -s &ldquo;<em><strong>&rdquo; -e &ldquo;</strong></em>&rdquo; sensor | zeek -r - </p>\n<h2 id=\"zeek-logs\">Zeek Logs</h2>\n<p>Zeek writes a variety of logs based on what it detects.</p>\n<ul>\n<li>conn.log Initial IP/Protocol Connections</li>\n<li>pe.log Portable Executable files found</li>\n<li>known_hosts.log New hosts seen in the past hour</li>\n<li>known_services.log New services seen in the past hour</li>\n<li>dpd.log Dynamic protocol detection</li>\n<li>weird.log Anomalous Activity</li>\n<li>loaded_script.log Scripts loaded upon start/restart</li>\n<li>reporter.log Severety of issues with Zeek</li>\n<li>sotfwarel.log Version numbers of vulnerable application layer software</li>\n<li>Protocols (http, dns, ssl, smtp, etc.)</li>\n</ul>\n<h2 id=\"viewing-logs\">Viewing Logs</h2>\n<p>In order to view the log files created, you will generally use <code>cat</code> to display the log and then pipe that to <code>zeek-cut</code> to select the values you want displayed.</p>\n<h3 id=\"example-command\">Example Command</h3>\n<p><code>cat conn.log | zeek-cut -u ts uid id.orig_h id.orig_p id.resp_h id.resp_p orig_bytes resp_bytes</code></p>\n<ul>\n<li><code>cat conn.log</code> Start by using cat to display the contents of the log. Any log file you see will represent some aspect of traffic on your network.</li>\n<li><code>zeek-cut</code>   Piped to zeek-cut, we can begin to select the fields we want. Each log file has different fields, so having a reference from zeek.org or another source is helpful.</li>\n<li><code>-u</code> option to print the time as a UTC timestamp.</li>\n<li><code>ts</code> displays the time stamp.</li>\n<li><code>uid</code> displays the uniquely generated ID for this connection. This ID will be the same across logs during this capture/time period.</li>\n<li><code>id.orig_h</code> displays the source IP address (originating host IP)</li>\n<li><code>id.orig_p</code> displays the source port (originating port)</li>\n<li><code>id.resp_h</code> displays the destination IP address (responding host IP)</li>\n<li><code>id.resp_p</code> displays the destination port (responding port)</li>\n<li><code>orig_bytes</code> displays bytes sent from the originating host</li>\n<li><code>resp_bytes</code> displays bytes sent from the responding host</li>\n</ul>\n<h2 id=\"zeek-cut-options\">zeek-cut Options</h2>\n<ul>\n<li><code>-c</code> Include the first format header block in the output.</li>\n<li><code>-C</code> Include all format header blocks in the output.</li>\n<li><code>-m</code> Include the first format header blocks in the output in minimal view.</li>\n<li><code>-M</code> Include all format header blocks in the output in minimal view.</li>\n<li><code>-d</code> Convert time values into human-readable format.</li>\n<li><code>-D &lt;fmt&gt;</code> Like -d, but specify format for time (see strftime(3) for syntax).</li>\n<li>mrarlen@gmail_com</li>\n<li><code>-F &lt;ofs&gt; </code>Sets a different output field separator character.</li>\n<li><code>-h</code> Show help.</li>\n<li><code>-n</code> Print all fields <em>except</em> those specified.</li>\n<li><code>-u</code> Like -d, but print timestamps in UTC instead of local time.</li>\n<li><code>-U &lt;fmt&gt;</code> Like -D, but print timestamps in UTC instead of local time.</li>\n</ul>\n<h2 id=\"sample-fields-available-from-various-logs\">Sample Fields Available from various logs</h2>\n<h3 id=\"connlog\">conn.log</h3>\n<p><code>#fields ts  uid id.orig_h   id.orig_p   id.resp_h   id.resp_p   version cipher  curve   server_name resumed  last_alert  next_protocol   established ssl_history cert_chain_fps  client_cert_chain_fps   sni_matches_cert</code></p>\n<h3 id=\"fileslog\">files.log</h3>\n<p><code>#fields ts  fuid tx_hosts    rx_hosts    conn_uids   source  depth   analyzers   mime_type   filename duration    local_orig  is_orig seen_bytes  total_bytes missing_bytes   overflow_bytes  timedout parent_fuid  md5 sha1 sha256  extracted   extracted_cutoff    extracted_size</code></p>\n<h3 id=\"ssllog\">SSL.log</h3>\n<p><code>#fields ts  uid id.orig_h   id.orig_p   id.resp_h   id.resp_p   version cipher  curve   server_name resumed  last_alert  next_protocol   established ssl_history cert_chain_fps  client_cert_chain_fps   sni_matches_cert</code></p>\n<h2 id=\"sample-queries\">Sample Queries</h2>\n<p>How many packets were sent and received by connection with source port 36499\n<code>cat conn.log | zeek-cut orig_pkts resp_pkts id.orig_p | grep 36499</code></p>\n<p>What is the server that was connected to in the SSL log?\n<code>cat ssl.log | zeek-cut id.org_h id.orig_p id.resp_h id.resp_p server_name</code></p>\n<p>Identify the file that was transferred from a host of interest.\n<code>cat files.log | zeek-cut fuid tx_hosts rx_hosts conn_uids</code></p>\n<p>What is the UID of a Portable Executable file that was downloaded?\n`cat pe.log | zeek-cut -d ts id</p>\n<p>What is the web traffic like from a host?\n<code>cat http.log | zeek-cut -d ts id.orig_h id.orig_p id.resp_h id.resp_p method host uri | grep &lt;IP-Address&gt;</code></p>\n<p>Describe the traffic from a host of interest\n<code>cat http.log | zeek-cut id.orig_h id.resp_h method user_agent | grep &lt;IP-Address&gt;</code></p>\n<p>What IP addresses and sites did a host of interest connect to?\n<code>cat dns.log | zeek-cut -d ts id.orig_h id.resp_h id.resp_p proto query answers| grep &lt;IP-Address&gt;</code></p>\n<p>Describe the email exchanges at the time of the incident.\n<code>cat smtp.log | zeek-cut -d ts uid id.orig_h id.orig_p id.resp_h id.resp_p helo mailfrom rcptto subject</code></p>\n",
				"content_text": "## What is Zeek    \r\n\r\nOpen Source Software By Vern Paxson to create \"Rich logs\" with information about network traffic.\r\nThis is a data-driven sensor to collect data, aggregate the data onto a log collector and gain insight into your network traffic.\r\nScalable to create many workers to collect data and processors. Can also be deployed on low cost off the shelf hardware.\r\nCluster configuration supports high bandwidth networks easily\r\nZeek likes to think of itself as an intelligence framework to analyze network traffic.\r\n\r\n## Get data from a sensor\r\nThe focus of this article is not data collection, but analyst use to use data from packet captures that have been collected. \r\n`analyze -s \"___\" -e \"___\" sensor | zeek -r - \r\n\r\n## Zeek Logs\r\nZeek writes a variety of logs based on what it detects.\r\n- conn.log Initial IP/Protocol Connections\r\n- pe.log Portable Executable files found\r\n- known_hosts.log New hosts seen in the past hour\r\n- known_services.log New services seen in the past hour\r\n- dpd.log Dynamic protocol detection\r\n- weird.log Anomalous Activity\r\n- loaded_script.log Scripts loaded upon start/restart\r\n- reporter.log Severety of issues with Zeek\r\n- sotfwarel.log Version numbers of vulnerable application layer software\r\n- Protocols (http, dns, ssl, smtp, etc.) \r\n\r\n## Viewing Logs\r\nIn order to view the log files created, you will generally use `cat` to display the log and then pipe that to `zeek-cut` to select the values you want displayed. \r\n\r\n### Example Command\r\n`cat conn.log | zeek-cut -u ts uid id.orig_h id.orig_p id.resp_h id.resp_p orig_bytes resp_bytes`\r\n\r\n- `cat conn.log` Start by using cat to display the contents of the log. Any log file you see will represent some aspect of traffic on your network. \r\n- `zeek-cut`   Piped to zeek-cut, we can begin to select the fields we want. Each log file has different fields, so having a reference from zeek.org or another source is helpful.\r\n- `-u` option to print the time as a UTC timestamp.\r\n- `ts` displays the time stamp.\r\n- `uid` displays the uniquely generated ID for this connection. This ID will be the same across logs during this capture/time period.\r\n- `id.orig_h` displays the source IP address (originating host IP)\r\n- `id.orig_p` displays the source port (originating port)\r\n- `id.resp_h` displays the destination IP address (responding host IP)\r\n- `id.resp_p` displays the destination port (responding port)\r\n- `orig_bytes` displays bytes sent from the originating host\r\n- `resp_bytes` displays bytes sent from the responding host\r\n\r\n## zeek-cut Options\r\n- `-c` Include the first format header block in the output.\r\n- `-C` Include all format header blocks in the output.\r\n- `-m` Include the first format header blocks in the output in minimal view.\r\n- `-M` Include all format header blocks in the output in minimal view.\r\n- `-d` Convert time values into human-readable format.\r\n- `-D <fmt>` Like -d, but specify format for time (see strftime(3) for syntax).\r\n- mrarlen@gmail_com\r\n- `-F <ofs> `Sets a different output field separator character.\r\n- `-h` Show help.\r\n- `-n` Print all fields *except* those specified.\r\n- `-u` Like -d, but print timestamps in UTC instead of local time.\r\n- `-U <fmt>` Like -D, but print timestamps in UTC instead of local time.\r\n\r\n## Sample Fields Available from various logs\r\n### conn.log\r\n`#fields ts  uid id.orig_h   id.orig_p   id.resp_h   id.resp_p   version cipher  curve   server_name resumed  last_alert  next_protocol   established ssl_history cert_chain_fps  client_cert_chain_fps   sni_matches_cert`\r\n### files.log\r\n`#fields ts  fuid tx_hosts    rx_hosts    conn_uids   source  depth   analyzers   mime_type   filename duration    local_orig  is_orig seen_bytes  total_bytes missing_bytes   overflow_bytes  timedout parent_fuid  md5 sha1 sha256  extracted   extracted_cutoff    extracted_size`\r\n### SSL.log\r\n`#fields ts  uid id.orig_h   id.orig_p   id.resp_h   id.resp_p   version cipher  curve   server_name resumed  last_alert  next_protocol   established ssl_history cert_chain_fps  client_cert_chain_fps   sni_matches_cert`\r\n  \r\n## Sample Queries\r\nHow many packets were sent and received by connection with source port 36499\r\n`cat conn.log | zeek-cut orig_pkts resp_pkts id.orig_p | grep 36499`\r\n\r\nWhat is the server that was connected to in the SSL log?\r\n`cat ssl.log | zeek-cut id.org_h id.orig_p id.resp_h id.resp_p server_name`\r\n\r\nIdentify the file that was transferred from a host of interest.\r\n`cat files.log | zeek-cut fuid tx_hosts rx_hosts conn_uids`\r\n\r\nWhat is the UID of a Portable Executable file that was downloaded?\r\n`cat pe.log | zeek-cut -d ts id\r\n\r\nWhat is the web traffic like from a host?\r\n`cat http.log | zeek-cut -d ts id.orig_h id.orig_p id.resp_h id.resp_p method host uri | grep <IP-Address>`\r\n\r\nDescribe the traffic from a host of interest\r\n`cat http.log | zeek-cut id.orig_h id.resp_h method user_agent | grep <IP-Address>`\r\n\r\nWhat IP addresses and sites did a host of interest connect to?\r\n`cat dns.log | zeek-cut -d ts id.orig_h id.resp_h id.resp_p proto query answers| grep <IP-Address>`\r\n\r\nDescribe the email exchanges at the time of the incident.\r\n`cat smtp.log | zeek-cut -d ts uid id.orig_h id.orig_p id.resp_h id.resp_p helo mailfrom rcptto subject`\n",
				"date_published": "2023-01-01T13:51:34-10:00",
				"url": "https://archonblue.com/2023/01/01/zeek.html",
				"tags": ["NetworkAnalysis","Cybersecurity","IncidentResponse"]
			},
			{
				"id": "http://archonblue.micro.blog/2023/01/01/what-is-silk.html",
				"title": "SiLK for Network Flow Monitoring",
				"content_html": "<h2 id=\"what-is-silk\">What is SiLK?</h2>\n<ul>\n<li>System for Internet Level Knowledge, SiLK is an Open Source software project from Carnegie Mellon.</li>\n<li>Single point to send all NetFlow data</li>\n<li>Can convert large packet data in order to analyze the data.</li>\n<li>Network behavioral analysis once data is converted to numeric.</li>\n<li>Perfect for networks that cannot collect packets.</li>\n</ul>\n<h2 id=\"commands-to-work-with-a-silk-repository\">Commands to Work with a SiLK Repository</h2>\n<p>**Note, commands are usually chained together.</p>\n<h3 id=\"rwfilter\">rwfilter</h3>\n<p>Allows you to pull data out of the repository and filter it.</p>\n<h3 id=\"rwcut\">rwcut</h3>\n<p>Allows you to select fields from your filter and display it to or write to a file.</p>\n<h3 id=\"rwstats\">rwstats</h3>\n<p>generate basic statistics on data</p>\n<h3 id=\"rwcount\">rwcount</h3>\n<p>aggregate flows into bins</p>\n<h3 id=\"rwuniq\">rwuniq</h3>\n<p>Use any set of fields as a filter to the flows</p>\n<h2 id=\"a-sample-command\">A Sample Command</h2>\n<p>`rwfilter &ndash;type=all &ndash;start-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; &ndash;end-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; &ndash;proto=0-255 &ndash;pass=stdout | rwcut &ndash;fields &lt;0-Xorfieldname&gt; &ndash;count=10</p>\n<ul>\n<li><code>--type=all</code> (determines the sensor/file as the source of data)</li>\n<li><code>--start-date</code> (Start date and time)</li>\n<li><code>--end-date</code> (End date and time)</li>\n<li><code>--proto=0-255</code> (Criteria to filter the data by. In this case Protocol. Designating 0-255 is one way to get data from all flows.)</li>\n<li><code>--pass=stdout</code> (Options are Pass or Fail. Pass sends the data you filtered to output for the next command to be run. Fail selects the data other than the filter you selected. Example: &ndash;proto=53 &ndash;fail=stdout would give you all flows that were NOT dns flows.)</li>\n<li><code>|</code> (pipe the output to the next tool.)</li>\n<li><code>rwcut</code> (This is a great tool to cut the data and show certain fields. Examples below.)</li>\n<li><code>--fields</code> (Select the fields to display. Could be a range like &ndash;fields=0-10 or seperate items &ndash;fields=sip,sport,dip,dport.)</li>\n<li><code>--count</code> (The number of items to display.)</li>\n<li>Looking for initial SYN and a following ACK. <code>--flags-initial=S/SA --flags-session=A/A</code></li>\n</ul>\n<h2 id=\"real-examples-you-may-use\">Real Examples you may use</h2>\n<h3 id=\"find-flows-related-to-tcp-port-443\">Find flows related to TCP port 443:</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; &ndash;end-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; &ndash;proto=6 &ndash;dport=443 &ndash;pass=stdout | rwcut &ndash;fields sip,sport, dip,dport,bytes &ndash;no-columns</p>\n<h3 id=\"find-flows-that-are-not-udp-53\">Find flows that are not UDP 53</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date__ &ndash;end-date ___ &ndash;proto=17 &ndash;aport=0-52,54-255 &ndash;pass=stdout | rwcut &ndash;fields sip,sport, dip,dport,bytes &ndash;no-columns</p>\n<h3 id=\"pass-is-our-network-fail-is-things-leaving-the-network\">Pass is our network. Fail is things leaving the network.</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; &ndash;end-date &lsquo;<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>&rsquo; scidr=10.10.0.0/16 &ndash;proto=6 &ndash;pass=stdout | rwfilter &ndash;dcidr=10.10.0.0/16 &ndash;fail=stdout &ndash;input-pipe=stdin | rwcut &ndash;fields sip,sport, dip,dport,bytes &ndash;no-columns</p>\n<h3 id=\"all-flows-for-a-given-time\">All flows for a given time</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;print-stat</p>\n<h3 id=\"tcp-flows\">TCP Flows</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=6 &ndash;print-stat</p>\n<h3 id=\"all-hosts-connecting-to-port-60000\">All Hosts connecting to port 60000</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date 2018/10/31 &ndash;proto=6 &ndash;flags-initial=S/SA &ndash;dport 60000 &ndash;pass=stdout | rwstats &ndash;count 200 &ndash;fields sip</p>\n<h3 id=\"find-all-flows-where-syn-is-present-with-or-without-ecn\">Find all flows where SYN is present with or without ECN</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date=<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date=<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=6 &ndash;flags-all=S/SFRPAU &ndash;pass=stdout | rwcut &ndash;fields sip,sport,dip,dport,packets,flags | head -21</p>\n<h3 id=\"find-all-the-records-for-two-hosts\">Find all the records for two hosts.</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date=<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date=<a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;any-address=172.28.30.5 &ndash;pass=stdout | rwfilter &ndash;input-pipe=stdin &ndash;any-address=192.225.158.2 &ndash;pass=stdout | rwcut &ndash;fields sip,sport,dip,dport,packets,flags,protocol</p>\n<h3 id=\"top-talkers\">Top Talkers</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fields=sip &ndash;count=5</p>\n<h3 id=\"top-talkers-from-external-sources\">Top Talkers from External Sources</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;fail=stdout | rwstats &ndash;fields=sip &ndash;count=5</p>\n<h3 id=\"top-talkers-from-internal-sources\">Top Talkers from Internal Sources</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fields=sip &ndash;count=5</p>\n<h3 id=\"top-talkers-source-to-destination-port\">Top Talkers Source to Destination Port</h3>\n<h3 id=\"source-ips-to-what-ports\">Source IPs to what ports?</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fields=sip,dport &ndash;count=5<br>\nfields create a single bin of data you&rsquo;re looking for.</p>\n<h3 id=\"top-talkers-source-bytes\">Top Talkers Source Bytes</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fields=sip &ndash;bytes &ndash;count=5<br>\n&ndash;values = bytes (bytes, flows, packets)</p>\n<h3 id=\"sort-protocols-by-bytes\">Sort Protocols by bytes</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fields=protocol &ndash;bytes &ndash;count=50</p>\n<h3 id=\"find-all-protocols-in-the-data\">Find All protocols in the data</h3>\n<p>`rwfilter &ndash;type=all &ndash;scidr=10.10.0.0/16 &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a>5 &ndash;proto=0-255 &ndash;pass=stdout | rwuniq &ndash; fields=protocol</p>\n<h3 id=\"how-many-flows-are-there-between-dates\">How many flows are there between dates?</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=0-255 &ndash;print-statistics</p>\n<h3 id=\"how-many-tcp-flows\">How many TCP FLows?</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=6 &ndash;print-statistics</p>\n<h3 id=\"how-many-ip-protocols\">How many IP Protocols</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=0-255 &ndash;pass=stdout | rwuniq &ndash;fields proto</p>\n<h3 id=\"what-is-the-port-number-that-received-the-most-connection-attempts\">What is the Port Number that received the most connection attempts?</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=6 &ndash;flags-initial=S/SA &ndash;pass=stdout | rwstats &ndash;fields dport &ndash;count 10</p>\n<h3 id=\"which-host-transferred-the-most-bytes-top-talker\">Which host transferred the most bytes? Top Talker</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;fieds=sip &ndash;bytes &ndash;count=10</p>\n<h3 id=\"how-many-different-ports\">How many different ports?</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=0-255 &ndash;saddress=172.16.60.32 &ndash;pass=stdout | rwstats &ndash;fieds=dport &ndash;bytes &ndash;count=20</p>\n<h3 id=\"what-is-the-timestamp-of-the-largest-single-flow\">What is the timestamp of the largest single flow?</h3>\n<p>`rwfilter &ndash;type=all &ndash;start-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;end-date <a href=\"year-mm-dd:hh:mm:ss\">year-mm-dd:hh:mm:ss</a> &ndash;proto=0-255 &ndash;pass=stdout | rwstats &ndash;bytes &ndash;fields=stime,sip &ndash;count=5</p>\n",
				"content_text": "## What is SiLK?\n* System for Internet Level Knowledge, SiLK is an Open Source software project from Carnegie Mellon.\n* Single point to send all NetFlow data \n* Can convert large packet data in order to analyze the data. \n* Network behavioral analysis once data is converted to numeric. \n* Perfect for networks that cannot collect packets. \n\n## Commands to Work with a SiLK Repository\n*\\*Note, commands are usually chained together.\n\n### rwfilter \nAllows you to pull data out of the repository and filter it. \n\n### rwcut\nAllows you to select fields from your filter and display it to or write to a file.\n\n### rwstats  \ngenerate basic statistics on data  \n  \n### rwcount  \naggregate flows into bins  \n  \n### rwuniq  \nUse any set of fields as a filter to the flows  \n\n## A Sample Command\n`rwfilter --type=all --start-date '<year-mm-dd:hh:mm:ss>' --end-date '<year-mm-dd:hh:mm:ss>' --proto=0-255 --pass=stdout | rwcut --fields <0-Xorfieldname> --count=10\n- `--type=all` (determines the sensor/file as the source of data)\n- `--start-date` (Start date and time)\n- `--end-date` (End date and time)\n- `--proto=0-255` (Criteria to filter the data by. In this case Protocol. Designating 0-255 is one way to get data from all flows.)\n- `--pass=stdout` (Options are Pass or Fail. Pass sends the data you filtered to output for the next command to be run. Fail selects the data other than the filter you selected. Example: --proto=53 --fail=stdout would give you all flows that were NOT dns flows.)\n- `|` (pipe the output to the next tool.)\n- `rwcut` (This is a great tool to cut the data and show certain fields. Examples below.)\n- `--fields` (Select the fields to display. Could be a range like --fields=0-10 or seperate items --fields=sip,sport,dip,dport.)\n- `--count` (The number of items to display.)\n- Looking for initial SYN and a following ACK. `--flags-initial=S/SA --flags-session=A/A`\n\n\n## Real Examples you may use\n### Find flows related to TCP port 443:  \n`rwfilter --type=all --start-date '<year-mm-dd:hh:mm:ss>' --end-date '<year-mm-dd:hh:mm:ss>' --proto=6 --dport=443 --pass=stdout | rwcut --fields sip,sport, dip,dport,bytes --no-columns  \n  \n### Find flows that are not UDP 53  \n`rwfilter --type=all --start-date__ --end-date ___ --proto=17 --aport=0-52,54-255 --pass=stdout | rwcut --fields sip,sport, dip,dport,bytes --no-columns\n\n### Pass is our network. Fail is things leaving the network.  \n`rwfilter --type=all --start-date '<year-mm-dd:hh:mm:ss>' --end-date '<year-mm-dd:hh:mm:ss>' scidr=10.10.0.0/16 --proto=6 --pass=stdout | rwfilter --dcidr=10.10.0.0/16 --fail=stdout --input-pipe=stdin | rwcut --fields sip,sport, dip,dport,bytes --no-columns\n\n### All flows for a given time  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --print-stat\n\n### TCP Flows  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=6 --print-stat\n\n### All Hosts connecting to port 60000  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date 2018/10/31 --proto=6 --flags-initial=S/SA --dport 60000 --pass=stdout | rwstats --count 200 --fields sip\n\n### Find all flows where SYN is present with or without ECN  \n`rwfilter --type=all --start-date=<year-mm-dd:hh:mm:ss> --end-date=<year-mm-dd:hh:mm:ss> --proto=6 --flags-all=S/SFRPAU --pass=stdout | rwcut --fields sip,sport,dip,dport,packets,flags | head -21\n\n### Find all the records for two hosts.  \n`rwfilter --type=all --start-date=<year-mm-dd:hh:mm:ss> --end-date=<year-mm-dd:hh:mm:ss> --any-address=172.28.30.5 --pass=stdout | rwfilter --input-pipe=stdin --any-address=192.225.158.2 --pass=stdout | rwcut --fields sip,sport,dip,dport,packets,flags,protocol\n\n### Top Talkers\n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwstats --fields=sip --count=5\n\n### Top Talkers from External Sources\n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --fail=stdout | rwstats --fields=sip --count=5\n\n### Top Talkers from Internal Sources\n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwstats --fields=sip --count=5\n\n### Top Talkers Source to Destination Port\n\n### Source IPs to what ports?  \n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwstats --fields=sip,dport --count=5  \nfields create a single bin of data you're looking for.\n\n### Top Talkers Source Bytes\n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwstats --fields=sip --bytes --count=5  \n--values = bytes (bytes, flows, packets)\n\n### Sort Protocols by bytes\n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwstats --fields=protocol --bytes --count=50\n\n### Find All protocols in the data\n`rwfilter --type=all --scidr=10.10.0.0/16 --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss>5 --proto=0-255 --pass=stdout | rwuniq -- fields=protocol\n\n### How many flows are there between dates?  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=0-255 --print-statistics\n\n### How many TCP FLows?  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=6 --print-statistics\n\n### How many IP Protocols  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=0-255 --pass=stdout | rwuniq --fields proto\n\n### What is the Port Number that received the most connection attempts?  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=6 --flags-initial=S/SA --pass=stdout | rwstats --fields dport --count 10\n\n### Which host transferred the most bytes? Top Talker  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=0-255 --pass=stdout | rwstats --fieds=sip --bytes --count=10  \n  \n### How many different ports?  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=0-255 --saddress=172.16.60.32 --pass=stdout | rwstats --fieds=dport --bytes --count=20\n\n### What is the timestamp of the largest single flow?  \n`rwfilter --type=all --start-date <year-mm-dd:hh:mm:ss> --end-date <year-mm-dd:hh:mm:ss> --proto=0-255 --pass=stdout | rwstats --bytes --fields=stime,sip --count=5\n",
				"date_published": "2023-01-01T13:00:51-10:00",
				"url": "https://archonblue.com/2023/01/01/what-is-silk.html",
				"tags": ["NetworkAnalysis","Cybersecurity","IncidentResponse"]
			},
			{
				"id": "http://archonblue.micro.blog/2022/12/31/tshark.html",
				"title": "tshark",
				"content_html": "<h2 id=\"what-is-tshark\">What is tshark?</h2>\n<p>tshark is the command line version of Wireshark. It&rsquo;s faster than Wireshark in processing packets, but not as performant as tcpdump.</p>\n<h2 id=\"notes-and-quirks-about-tshark\">Notes and Quirks about tshark</h2>\n<ul>\n<li>tshark like wireshark will do some processing of packet data. For example, if you look at ICMP error messages, the first 64 bytes of the original packet are included in the packet, so tshark can find that data where tcpdump would not find it with a similar filter.\n<ul>\n<li>tcpdump-n -r icmp-error.pcap&rsquo;net 10' | wc-l</li>\n<li>tshark-n -r icmp-error.pcap-Y &lsquo;ip.addr== 10.0.0.0/8&rsquo; | wc-l</li>\n</ul>\n</li>\n<li>tshark -c # will look through the # of packets specified. It will NOT give you the first # results based on your query/filter. This is different than tcpdump -c # which will give you # results of the query/filter. z</li>\n</ul>\n<h2 id=\"tshark-options\">tshark Options</h2>\n<ul>\n<li>-q (quiet display, reduce extra display info)</li>\n<li>-r (read a pcap file)</li>\n<li>-n (no DNS resolution)</li>\n<li>-Y &lsquo;wireshark-filter&rsquo; (add a wireshark filter)</li>\n<li>-w (write a pcap file)</li>\n<li>-T fields -e <code>&lt;fields&gt;</code>  (-T determines the type of output. -e which fields to display)\n<ul>\n<li>tcp.strem</li>\n<li>eth.src</li>\n<li>eth.dst</li>\n<li>tcp.dstport</li>\n<li>tcp.srcport</li>\n<li>ip.src</li>\n<li>ip.dst</li>\n<li>dns.id</li>\n<li>dns.qry.name</li>\n<li>dns.a</li>\n</ul>\n</li>\n<li>-z <code>&lt;statistics&gt;</code>\n<ul>\n<li>http</li>\n<li>tree</li>\n<li>http_req</li>\n<li>follow,tcp,ascii, <code>&lt;#&gt;</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"sample-commands\">Sample Commands</h2>\n<h3 id=\"using-tshark-with-icmp\">Using tshark with ICMP</h3>\n<h3 id=\"using-tshark-to-get-http-information\">Using tshark to get HTTP information</h3>\n<p><code>tshark -r &lt;pcap-file&gt; -n -q -z http,tree </code>tshark -r <!-- raw HTML omitted --> -n -q -z http_req,tree</p>\n<h3 id=\"using-tshark-to-find-and-follow-a-stream\">Using tshark to find and follow a stream</h3>\n<p><code>tshark -n -r &lt;pcap-file&gt; -Y 'tcp.srcport == 5678 and tcp.dstport == 80' -T fields -e tcp.stream | uniq </code>tshark -n -r <!-- raw HTML omitted --> -q -z follow,tcp,ascii,98 | more</p>\n<h3 id=\"using-tshark-with-dns\">Using tshark with DNS</h3>\n<p>`tshark -n -r <!-- raw HTML omitted --> -Y &lsquo;ip.addr == 192.168.11.175 and ip.addr == 192.168.11.26 and udp.port == 53&rsquo; -T fields -e eth.src -e eth.dst -e ip.src -e ip.dst -e dns.id -e dns.qry.name -e dns.a</p>\n<h2 id=\"bonus\">Bonus</h2>\n<p>When you get a base64 encoded payload, you can create a file and use this to decode it.\n`base64 &ndash;decode -i attachment.txt &gt; /tmp/attachment.bin</p>\n",
				"content_text": "## What is tshark?\ntshark is the command line version of Wireshark. It's faster than Wireshark in processing packets, but not as performant as tcpdump. \n\n## Notes and Quirks about tshark\n- tshark like wireshark will do some processing of packet data. For example, if you look at ICMP error messages, the first 64 bytes of the original packet are included in the packet, so tshark can find that data where tcpdump would not find it with a similar filter. \n\t- tcpdump-n -r icmp-error.pcap'net 10' | wc-l\n\t- tshark-n -r icmp-error.pcap-Y 'ip.addr== 10.0.0.0/8' | wc-l\n- tshark -c # will look through the # of packets specified. It will NOT give you the first # results based on your query/filter. This is different than tcpdump -c # which will give you # results of the query/filter. z\n\n## tshark Options\n- -q (quiet display, reduce extra display info)\n- -r (read a pcap file)\n- -n (no DNS resolution)\n- -Y 'wireshark-filter' (add a wireshark filter)\n- -w (write a pcap file)\n- -T fields -e `<fields>`  (-T determines the type of output. -e which fields to display)\n\t- tcp.strem\n\t- eth.src\n\t- eth.dst\n\t- tcp.dstport\n\t- tcp.srcport\n\t- ip.src\n\t- ip.dst\n\t- dns.id\n\t- dns.qry.name\n\t- dns.a\n- -z `<statistics>` \n\t- http\n\t- tree\n\t- http_req\n\t- follow,tcp,ascii, `<#>`\n\n## Sample Commands\n\n### Using tshark with ICMP\n\n### Using tshark to get HTTP information\n`tshark -r <pcap-file> -n -q -z http,tree\n`tshark -r <pcap-file> -n -q -z http_req,tree\n\n### Using tshark to find and follow a stream\n`tshark -n -r <pcap-file> -Y 'tcp.srcport == 5678 and tcp.dstport == 80' -T fields -e tcp.stream | uniq\n`tshark -n -r <pcap-file> -q -z follow,tcp,ascii,98 | more\n\n### Using tshark with DNS\n`tshark -n -r <pcap-file> -Y 'ip.addr == 192.168.11.175 and ip.addr == 192.168.11.26 and udp.port == 53' -T fields -e eth.src -e eth.dst -e ip.src -e ip.dst -e dns.id -e dns.qry.name -e dns.a\n\n## Bonus\nWhen you get a base64 encoded payload, you can create a file and use this to decode it.\n`base64 --decode -i attachment.txt > /tmp/attachment.bin\n",
				"date_published": "2022-12-31T13:09:48-10:00",
				"url": "https://archonblue.com/2022/12/31/tshark.html",
				"tags": ["NetworkAnalysis","Cybersecurity","IncidentResponse"]
			},
			{
				"id": "http://archonblue.micro.blog/2022/12/19/wireshark.html",
				"title": "Wireshark",
				"content_html": "<p>Start analysis with Statistics. Capture File properties for a summary of traffic. Protocol Hierarchy for traffic by layers and stats. Conversations provides insight into IPs and Ports. Large file transfers. And small mapping activity can be found here.</p>\n<p>Analyze TCP Session can show an entire conversation.</p>\n<p>Find a Packet by String and Packet Bytes. Then Follow the Stream for the whole conversation.</p>\n<p>Use Profiles to customize your view of Wireshark. If you do common tasks and focus on certain items, create views and switch between them to speed analysis.</p>\n",
				"content_text": "Start analysis with Statistics. Capture File properties for a summary of traffic. Protocol Hierarchy for traffic by layers and stats. Conversations provides insight into IPs and Ports. Large file transfers. And small mapping activity can be found here. \n\nAnalyze TCP Session can show an entire conversation. \n\nFind a Packet by String and Packet Bytes. Then Follow the Stream for the whole conversation. \n\nUse Profiles to customize your view of Wireshark. If you do common tasks and focus on certain items, create views and switch between them to speed analysis. \n\n\n",
				"date_published": "2022-12-19T11:30:40-10:00",
				"url": "https://archonblue.com/2022/12/19/wireshark.html"
			},
			{
				"id": "http://archonblue.micro.blog/2022/12/19/use-tcpdump-to.html",
				
				"content_html": "<p>Use tcpdump to find and isolate packets/sessions/events of interest. Use Wireshark to inspect details.</p>\n",
				"content_text": "Use tcpdump to find and isolate packets/sessions/events of interest. Use Wireshark to inspect details. \n",
				"date_published": "2022-12-19T11:09:00-10:00",
				"url": "https://archonblue.com/2022/12/19/use-tcpdump-to.html",
				"tags": ["NetworkAnalysis"]
			},
			{
				"id": "http://archonblue.micro.blog/2022/12/18/this-is-the.html",
				
				"content_html": "<p>This is the start of something new…</p>\n",
				"content_text": "This is the start of something new…\n",
				"date_published": "2022-12-18T17:31:21-10:00",
				"url": "https://archonblue.com/2022/12/18/this-is-the.html"
			}
	]
}
